// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  sid       String   @id
  sess      Json
  expire    DateTime
  
  @@index([expire], name: "IDX_session_expire")
  @@map("sessions")
}

model User {
  id             String   @id
  username       String   @unique
  password       String   @default("")
  email          String?  @unique
  firstName      String?  @map("first_name")
  lastName       String?  @map("last_name")
  bio            String?
  profileImageUrl String?  @map("profile_image_url")
  name           String
  plan           String   @default("Free")
  initials       String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  
  // Relationships
  brainDumps        BrainDump[]
  problemTrees      ProblemTree[]
  draftedPlans      DraftedPlan[]
  clarityLabs       ClarityLab[]
  weeklyReflections WeeklyReflection[]
  monthlyCheckIns   MonthlyCheckIn[]
  priorities        Priority[]
  decisions         Decision[]
  offers            Offer[]
  offerNotes        OfferNote[]
  activities        Activity[]

  @@map("users")
}

model BrainDump {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  content   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  
  // Relationship to User
  user      User     @relation(fields: [userId], references: [id])

  @@map("brain_dumps")
}

model ProblemTree {
  id                Int      @id @default(autoincrement())
  userId           String   @map("user_id")
  title            String
  mainProblem      String   @map("main_problem")
  subProblems      String[] @map("sub_problems")
  rootCauses       String[] @map("root_causes")
  potentialSolutions String[] @map("potential_solutions")
  nextActions      String[] @map("next_actions")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")
  
  // Relationship to User
  user             User     @relation(fields: [userId], references: [id])

  @@map("problem_trees")
}

model DraftedPlan {
  id               Int      @id @default(autoincrement())
  userId           String   @map("user_id")
  title            String
  description      String
  status           String   @default("Draft")
  components       String[]
  resourcesNeeded  String[] @map("resources_needed")
  expectedOutcomes String[] @map("expected_outcomes")
  comments         Int      @default(0)
  attachments      Int      @default(0)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")
  
  // Relationship to User
  user             User     @relation(fields: [userId], references: [id])

  @@map("drafted_plans")
}

model ClarityLab {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  title       String
  description String
  category    String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  
  // Relationship to User
  user        User     @relation(fields: [userId], references: [id])

  @@map("clarity_labs")
}

model WeeklyReflection {
  id             Int       @id @default(autoincrement())
  userId         String    @map("user_id")
  weekDate       DateTime  @map("week_date")
  wentWell       String?   @map("went_well")
  challenges     String?
  learnings      String?
  nextWeekFocus  String?   @map("next_week_focus")
  isDraft        Boolean   @default(true) @map("is_draft")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  
  // Relationship to User
  user           User      @relation(fields: [userId], references: [id])

  @@map("weekly_reflections")
}

model MonthlyCheckIn {
  id                  Int       @id @default(autoincrement())
  userId              String    @map("user_id")
  month               Int
  year                Int
  completedOn         DateTime? @map("completed_on")
  achievements        String[]
  challenges          String[]
  goalProgress        Json      @map("goal_progress") // Store as JSON for complex structure
  nextMonthPriorities String[]  @map("next_month_priorities")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @default(now()) @map("updated_at")
  
  // Relationship to User
  user                User      @relation(fields: [userId], references: [id])

  @@map("monthly_check_ins")
}

model Priority {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  priority  String
  order     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  
  // Relationship to User
  user      User     @relation(fields: [userId], references: [id])

  @@map("priorities")
}

model Decision {
  id              Int       @id @default(autoincrement())
  userId          String    @map("user_id")
  title           String
  category        String
  decisionDate    DateTime  @map("decision_date")
  why             String
  alternatives    String?
  expectedOutcome String?   @map("expected_outcome")
  followUpDate    DateTime? @map("follow_up_date")
  status          String    @default("Pending")
  whatDifferent   String?   @map("what_different")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @map("updated_at")
  
  // Relationship to User
  user            User      @relation(fields: [userId], references: [id])

  @@map("decisions")
}

model Offer {
  id             Int       @id @default(autoincrement())
  userId         String    @map("user_id")
  title          String
  description    String
  status         String    @default("Active")
  price          String
  category       String    @default("Service")
  duration       String?
  format         String?
  clientCount    Int?      @default(0) @map("client_count")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  archivedAt     DateTime? @map("archived_at")
  
  // Relationship to User
  user           User      @relation(fields: [userId], references: [id])

  @@map("offers")
}

model OfferNote {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  
  // Relationship to User
  user      User     @relation(fields: [userId], references: [id])

  @@map("offer_notes")
}

model Activity {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  type       String
  entityType String   @map("entity_type")
  entityName String   @map("entity_name")
  metadata   Json
  createdAt  DateTime @default(now()) @map("created_at")
  
  // Relationship to User
  user       User     @relation(fields: [userId], references: [id])

  @@map("activities")
} 